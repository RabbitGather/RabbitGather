// Generated by CoffeeScript 2.5.1
(function() {
  `Tracks Ajax requests, implementing a subset of ajax.`;
  window.AjaxClient = class AjaxClient {
    constructor(sendEvent, socketIdFcn) {
      this.requestAjax = this.requestAjax.bind(this);
      this.receiveAjax = this.receiveAjax.bind(this);
      this.sendEvent = sendEvent;
      this.socketIdFcn = socketIdFcn;
      this.outstandingRequests = {}; // Map of ajax requestId to callbacks.
    }

    requestAjax(path, options, successCallback, errorCallback) {
      var data, requestId;
      requestId = Math.random().toString(36).substr(2, 14);
      if (typeof callback !== "undefined" && typeof callback !== "function") {
        console.error("error: callback is not a function!");
        return;
      }
      this.outstandingRequests[requestId] = {
        "successCallback": successCallback,
        "errorCallback": errorCallback,
        "timestamp": new Date().getTime()
      };
      data = {
        "filename": path, // Path is more accurate than filename, but use filename for consistency.
        "socketId": this.socketIdFcn(),
        "requestId": requestId,
        "options": options,
        "type": "ajax"
      };
      return this.sendEvent("requestFile", data);
    }

    receiveAjax(data) {
      var request;
      if (!data.requestId) {
        console.error("received AJAX response with no request ID");
        return;
      }
      // Remove request out of the outstanding map, if it exists
      request = this.outstandingRequests[data.requestId];
      if (!request || typeof request === "undefined") {
        console.error("received ajax response for a nonexistent request id");
        return;
      }
      delete this.outstandingRequests[data.requestId];
      if (!data.errorThrown) {
        return request.successCallback(data.fileContents);
      } else {
        // TODO (low priority): first argument should technically be a jqXHR object.
        return request.errorCallback({}, data.textStatus, data.errorThrown);
      }
    }

  };

}).call(this);
