// Generated by CoffeeScript 2.5.1
(function() {
  window.ClientDataChannel = class ClientDataChannel {
    constructor(onDataCallback) {
      var options;
      this.onOpen = this.onOpen.bind(this);
      this.onData = this.onData.bind(this);
      this.onError = this.onError.bind(this);
      this.onDataCallback = onDataCallback;
      if (isDevelopmentServer()) {
        options = {
          host: location.hostname,
          port: 9000,
          config: {
            'iceServers': []
          }
        };
      } else {
        options = {
          key: "rrvwvw4tuyxpqfr",
          config: {
            "iceServers": []
          }
        };
      }
      // Use the predefined peer id, if there is one
      if (this.id) {
        this.peer = new Peer(this.id, options);
      } else {
        this.peer = new Peer(options);
      }
      this.peer.on("open", this.onOpen);
      this.peer.on("error", this.onError);
    }

    onOpen(id) {
      return this.id = id;
    }

    onData(data) {
      var e;
      try {
        // TODO remove: hack until PeerJS / Chrome works again with huge JSON objects.
        // In the meantime, this seems to work with the connection sending a stringified data object.
        data = JSON.parse(data);
      } catch (error1) {
        e = error1;
        data = data;
      }
      return this.onDataCallback(data);
    }

    onError(error) {
      if (error.type === "unavailable-id") {
        if (this.onUnavailableID) {
          return this.onUnavailableID();
        }
      } else if (error.type === "invalid-id") {
        if (this.onInvalidID) {
          return this.onInvalidID();
        }
      }
    }

  };

}).call(this);
