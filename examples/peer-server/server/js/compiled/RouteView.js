// Generated by CoffeeScript 2.5.1
(function() {
  var ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ref = window.RouteView = (function() {
    class RouteView extends Backbone.View {
      constructor() {
        super(...arguments);
        this.initProductionRouteEvents = this.initProductionRouteEvents.bind(this);
        this.paramNamesToString = this.paramNamesToString.bind(this);
        this.render = this.render.bind(this);
        this.focus = this.focus.bind(this);
        this.renderFunctionSignature = this.renderFunctionSignature.bind(this);
        this.createEditor = this.createEditor.bind(this);
        this.updateErrorMessage = this.updateErrorMessage.bind(this);
        this.updateContents = this.updateContents.bind(this);
        this.eventPathChange = this.eventPathChange.bind(this);
        this.eventNameChange = this.eventNameChange.bind(this);
        this.renderValidationResult = this.renderValidationResult.bind(this);
        this.onDestroy = this.onDestroy.bind(this);
        this.replaceTooltipsy = this.replaceTooltipsy.bind(this);
      }

      initialize(options) {
        this.tmplRoute = Handlebars.templates["route"];
        this.tmplFunctionSignature = Handlebars.templates["route-function-signature"];
        this.model.on("change:paramNames", this.renderFunctionSignature);
        this.model.on("change", this.renderValidationResult);
        this.model.on("destroy", this.onDestroy);
        this.initProductionRouteEvents();
        return this.model.on("change:productionVersion", this.initProductionRouteEvents, this);
      }

      initProductionRouteEvents() {
        boundMethodCheck(this, ref);
        this.productionRoute = this.model.get("productionVersion");
        if (this.productionRoute) {
          return this.productionRoute.on("change:errorMessage", this.updateErrorMessage);
        }
      }

      paramNamesToString(paramNames) {
        boundMethodCheck(this, ref);
        if (paramNames.length === 0) {
          return "params";
        }
        return paramNames.join(", ") + ", params";
      }

      render() {
        var $el;
        boundMethodCheck(this, ref);
        $el = $(this.el);
        $el.html(this.tmplRoute({
          name: this.model.get("name"),
          path: this.model.get("routePath"),
          functionParams: this.paramNamesToString([])
        }));
        this.updateErrorMessage();
        this.code = this.$(".code");
        this.path = this.$(".path");
        this.functionSignature = this.$(".function-signature");
        this.aceEditor = this.createEditor(this.code);
        this.aceEditor.getSession().setValue(this.model.get("routeCode"));
        this.aceEditor.on("change", this.updateContents);
        this.renderFunctionSignature();
        this.replaceTooltipsy(null, this.name, RouteView.nameErrorText);
        this.replaceTooltipsy(null, this.path, RouteView.pathErrorText);
        return this;
      }

      focus() {
        boundMethodCheck(this, ref);
        this.name.focus();
        return this.renderValidationResult();
      }

      renderFunctionSignature() {
        var newName;
        boundMethodCheck(this, ref);
        this.functionSignature.html(this.tmplFunctionSignature({
          name: this.model.get("name"),
          parameterString: this.paramNamesToString(this.model.get("paramNames"))
        }));
        newName = this.$(".name");
        this.replaceTooltipsy(this.name, newName, RouteView.nameErrorText);
        return this.name = newName;
      }

      createEditor(elem) {
        var editor;
        boundMethodCheck(this, ref);
        editor = ace.edit(elem[0]);
        editor.setTheme("ace/theme/tomorrow_night_eighties");
        editor.setFontSize("12px");
        editor.getSession().setMode("ace/mode/javascript");
        return editor;
      }

      updateErrorMessage() {
        var displayWithClass, errorMessage, errorMessageContainer, message, startsWith;
        boundMethodCheck(this, ref);
        startsWith = function(str, start) {
          return str.slice(0, start.length) === start;
        };
        displayWithClass = (errorMessage, className) => {
          return $(errorMessage).removeClass("alert-error").removeClass("alert-block").removeClass("alert-success").addClass(className);
        };
        errorMessageContainer = $(this.el).find(".error-message-container");
        if (this.productionRoute && this.productionRoute.get("errorMessage")) {
          errorMessage = errorMessageContainer.find(".error-message");
          message = this.productionRoute.get("errorMessage");
          errorMessage.html(message);
          if (startsWith(message, "Success: ")) {
            displayWithClass(errorMessageContainer, "alert-success");
          } else if (startsWith(message, "Note: ")) {
            displayWithClass(errorMessageContainer, "alert-block");
          } else {
            displayWithClass(errorMessageContainer, "alert-error");
          }
          return errorMessageContainer.show();
        } else {
          return errorMessageContainer.hide();
        }
      }

      updateContents() {
        boundMethodCheck(this, ref);
        return this.model.save("routeCode", this.aceEditor.getValue());
      }

      eventPathChange(event) {
        var target;
        boundMethodCheck(this, ref);
        target = $(event.currentTarget);
        this.model.save("routePath", target.val());
        return this.renderValidationResult();
      }

      eventNameChange(event) {
        var target;
        boundMethodCheck(this, ref);
        target = $(event.currentTarget);
        this.model.save("name", target.val());
        return this.renderValidationResult();
      }

      renderValidationResult(model, error) {
        boundMethodCheck(this, ref);
        this.model.isValid();
        error = this.model.validationError;
        if ($(this.name).data('tooltipsy')) {
          if (error && error.name) {
            $(this.name).data('tooltipsy').show();
          } else {
            $(this.name).data('tooltipsy').hide();
          }
        }
        if ($(this.path).data('tooltipsy')) {
          if (error && error.routePath) {
            return $(this.path).data('tooltipsy').show();
          } else {
            return $(this.path).data('tooltipsy').hide();
          }
        }
      }

      onDestroy() {
        boundMethodCheck(this, ref);
        this.aceEditor.destroy();
        $(this.name).data('tooltipsy').destroy();
        $(this.path).data('tooltipsy').destroy();
        return this.model.off(null, null, this);
      }

      replaceTooltipsy(oldTooltipsyEl, newTooltipsyEl, text) {
        boundMethodCheck(this, ref);
        if (oldTooltipsyEl) {
          $(oldTooltipsyEl).data('tooltipsy').destroy();
        }
        return $(newTooltipsyEl).tooltipsy({
          content: text,
          hideEvent: "",
          showEvent: "",
          offset: [0, 1]
        });
      }

    };

    RouteView.prototype.events = {
      "keyup .path": "eventPathChange",
      "keyup .name": "eventNameChange",
      "remove": "onDestroy"
    };

    RouteView.nameErrorText = "Invalid name";

    RouteView.pathErrorText = "Invalid route path";

    return RouteView;

  }).call(this);

}).call(this);
