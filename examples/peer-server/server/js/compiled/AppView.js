// Generated by CoffeeScript 2.5.1
(function() {
  ` Handles all frontend setup for UI.`;
  var ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ref = window.AppView = (function() {
    class AppView extends Backbone.View {
      constructor() {
        super(...arguments);
        this.setClientBrowserLink = this.setClientBrowserLink.bind(this);
        this.updateConnectionCount = this.updateConnectionCount.bind(this);
        this.handleZipFile = this.handleZipFile.bind(this);
        this.renderTopbarButtons = this.renderTopbarButtons.bind(this);
        this.goToPage = this.goToPage.bind(this);
        this.goToEditPage = this.goToEditPage.bind(this);
        this.goToDatabasePage = this.goToDatabasePage.bind(this);
        this.goToUnavailableIDPage = this.goToUnavailableIDPage.bind(this);
        this.goToInvalidIDPage = this.goToInvalidIDPage.bind(this);
        this.getAlternativeServerID = this.getAlternativeServerID.bind(this);
      }

      initialize(options) {
        this.serverFileCollection = options.serverFileCollection;
        this.routeCollection = options.routeCollection;
        this.userDatabase = options.userDatabase;
        this.serverAge = new ServerAge($(".server-age-wrapper"));
        this.connectionDataView = new ServerConnectionDataView({
          el: $(".server-connection-data-wrapper"),
          model: new ServerConnectionDataModel()
        });
        // Templates
        this.tmplEditPage = Handlebars.templates["edit-page"];
        this.tmplDatabasePage = Handlebars.templates["database-page"];
        this.tmplTopbarButtons = Handlebars.templates["topbar-buttons"];
        this.tmplServerIDMessage = Handlebars.templates["server-id-message"];
        // Routes
        this.routeMap = {
          "edit": this.goToEditPage,
          "database": this.goToDatabasePage
        };
        this.routeDefault = "edit";
        this.routeCurrent = "";
        // Events
        this.on("setServerID", this.setClientBrowserLink);
        this.on("onUnavailableID", this.goToUnavailableIDPage);
        this.on("onInvalidID", this.goToInvalidIDPage);
        return $(window).on("hashchange", () => {
          return this.goToPage();
        });
      }

      setClientBrowserLink(serverID) {
        var link;
        boundMethodCheck(this, ref);
        this.serverID = serverID;
        this.goToPage();
        link = window.location.origin + "/connect/" + serverID + "/";
        return this.clientBrowserLink.attr("href", link);
      }

      updateConnectionCount(count) {
        boundMethodCheck(this, ref);
        return this.connectionDataView.model.set("count", count);
      }

      handleZipFile(file) {
        var reader;
        boundMethodCheck(this, ref);
        reader = new FileReader();
        reader.onload = (evt) => {
          return new ClientServerUnarchiver({
            serverFileCollection: this.serverFileCollection,
            routeCollection: this.routeCollection,
            userDatabase: this.userDatabase,
            contents: evt.target.result
          });
        };
        return reader.readAsArrayBuffer(file);
      }

      renderTopbarButtons() {
        boundMethodCheck(this, ref);
        $(".topbar-buttons").remove();
        $(".topbar").append(this.tmplTopbarButtons);
        this.clientBrowserLink = $(".navbar .browse");
        return this.archiveButton = $(".navbar .archive");
      }

      goToPage(slug) {
        boundMethodCheck(this, ref);
        if (slug) {
          location.hash = "#" + slug;
        } else {
          slug = location.hash.replace("#", "");
        }
        if (!this.routeMap[slug]) {
          slug = this.routeDefault;
        }
        if (slug === this.routeCurrent) {
          return;
        }
        this.routeCurrent = slug;
        return this.routeMap[slug]();
      }

      goToEditPage() {
        boundMethodCheck(this, ref);
        this.renderTopbarButtons();
        $(this.el).html(this.tmplEditPage);
        this.serverFileCollectionView = new ClientServerCollectionView({
          serverFileCollection: this.serverFileCollection,
          routeCollection: this.routeCollection,
          userDatabase: this.userDatabase,
          handleZipFcn: this.handleZipFile
        });
        return this.archiver = new ClientServerArchiver({
          serverName: this.serverID,
          serverFileCollection: this.serverFileCollection,
          routeCollection: this.routeCollection,
          userDatabase: this.userDatabase,
          button: this.archiveButton
        });
      }

      goToDatabasePage() {
        boundMethodCheck(this, ref);
        this.renderTopbarButtons();
        $(this.el).html(this.tmplDatabasePage());
        return this.databaseView = new DatabaseView({
          userDatabase: this.userDatabase
        });
      }

      goToUnavailableIDPage(desiredServerID) {
        boundMethodCheck(this, ref);
        // TODO: The redirect currently drops the template argument -- the redirection
        // should pass along the original template URL parameter.
        $(".topbar-buttons").remove();
        return $(this.el).html(this.tmplServerIDMessage({
          message: "\"" + desiredServerID + "\" is unavailable.",
          alternativeServerID: this.getAlternativeServerID()
        }));
      }

      goToInvalidIDPage(desiredServerID) {
        boundMethodCheck(this, ref);
        $(".topbar-buttons").remove();
        return $(this.el).html(this.tmplServerIDMessage({
          message: "\"" + desiredServerID + "\" is an invalid server name.",
          alternativeServerID: this.getAlternativeServerID()
        }));
      }

      getAlternativeServerID() {
        var randomIndex;
        boundMethodCheck(this, ref);
        randomIndex = Math.floor(Math.random() * AppView.listOfAnimals.length);
        return AppView.listOfAnimals[randomIndex];
      }

    };

    AppView.prototype.el = "#client-server";

    AppView.listOfAnimals = ["aardvark", "albatross", "alligator", "alpaca", "ant", "anteater", "antelope", "ape", "donkey", "badger", "bat", "bear", "beaver", "bee", "bison", "buffalo", "butterfly", "camel", "caribou", "cat", "caterpillar", "cattle", "cheetah", "chicken", "chinchilla", "clam", "cobra", "coyote", "crab", "crane", "crocodile", "crow", "deer", "dinosaur", "dog", "dogfish", "dolphin", "dove", "dragonfly", "duck", "eagle", "eel", "elephant", "elk", "falcon", "finch", "fish", "flamingo", "fly", "fox", "frog", "gazelle", "gerbil", "panda", "giraffe", "gnat", "goat", "goose", "goldfinch", "goldfish", "grasshopper", "hamster", "hare", "hawk", "hedgehog", "heron", "hornet", "hippo", "horse", "hummingbird", "hyena", "jaguar", "jay", "jellyfish", "kangaroo", "lark", "lemur", "lion", "leopard", "llama", "lyrebird", "magpie", "manatee", "meerkat", "mole", "monkey", "marten", "moose", "mouse", "newt", "narwhal", "mule", "nightingale", "octopus", "otter", "owl", "oyster", "panther", "parrot", "partridge", "pelican", "penguin", "pig", "pigeon", "pony", "porcupine", "porpoise", "quail", "rabbit", "raccoon", "ram", "rat", "raven", "reindeer", "salmon", "salamander", "scorpion", "seal", "shark", "sheep", "shrimp", "snail", "snake", "squid", "squirrel", "starling", "swallow", "swan", "tiger", "turkey", "trout", "turtle", "vulture", "whale", "wolf", "wolverine", "woodpecker", "yak", "zebra"];

    return AppView;

  }).call(this);

}).call(this);
