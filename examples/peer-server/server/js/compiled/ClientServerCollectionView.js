// Generated by CoffeeScript 2.5.1
(function() {
  `Display and organization of the user-uploaded file collection.
Edit/Done modes for saving.`;
  var ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ref = window.ClientServerCollectionView = (function() {
    class ClientServerCollectionView extends Backbone.View {
      constructor() {
        super(...arguments);
        this.render = this.render.bind(this);
        // TODO (already fixed?) Handle bug where initial non-index, non-404 html files saved in localstorage return a 404
        //  due to there being no initial production version of them formed.
        this.renderFileLists = this.renderFileLists.bind(this);
        this.showInitialSaveNotification = this.showInitialSaveNotification.bind(this);
        this.addAll = this.addAll.bind(this);
        this.addOneServerFile = this.addOneServerFile.bind(this);
        this.addOneRoute = this.addOneRoute.bind(this);
        this.setupConfirm = this.setupConfirm.bind(this);
        this.resetClicksOnFileList = this.resetClicksOnFileList.bind(this);
        this.eventSelectFile = this.eventSelectFile.bind(this);
        this.eventMouseEnterFile = this.eventMouseEnterFile.bind(this);
        this.eventMouseLeaveFile = this.eventMouseLeaveFile.bind(this);
        this.eventDeleteClicked = this.eventDeleteClicked.bind(this);
        this.eventRenameFile = this.eventRenameFile.bind(this);
        this.eventDeleteFileConfirmed = this.eventDeleteFileConfirmed.bind(this);
        this.clearAll = this.clearAll.bind(this);
        this.eventKeyDown = this.eventKeyDown.bind(this);
        this.eventSaveChanges = this.eventSaveChanges.bind(this);
        this.preventDefault = this.preventDefault.bind(this);
        this.eventUploadFiles = this.eventUploadFiles.bind(this);
        this.eventDropFiles = this.eventDropFiles.bind(this);
        this.handleFile = this.handleFile.bind(this);
        this.handleFileChanged = this.handleFileChanged.bind(this);
        this.handleRouteNameChange = this.handleRouteNameChange.bind(this);
        this.handleFileDeleted = this.handleFileDeleted.bind(this);
        // --- CREATION METHODS ---
        this.eventCreateHTML = this.eventCreateHTML.bind(this);
        this.eventCreateJS = this.eventCreateJS.bind(this);
        this.eventCreateCSS = this.eventCreateCSS.bind(this);
        this.eventCreateTemplate = this.eventCreateTemplate.bind(this);
        this.createFile = this.createFile.bind(this);
        this.eventCreateDynamic = this.eventCreateDynamic.bind(this);
        // --- EDITING METHODS ---
        this.eventDoneNamingFile = this.eventDoneNamingFile.bind(this);
        this.eventKeypressWhileRenaming = this.eventKeypressWhileRenaming.bind(this);
        this.editableFileName = this.editableFileName.bind(this);
        this.appendServerFileToFileList = this.appendServerFileToFileList.bind(this);
        this.select = this.select.bind(this);
        this.selectServerFile = this.selectServerFile.bind(this);
        this.selectRoute = this.selectRoute.bind(this);
      }

      initialize(options) {
        this.serverFileCollection = options.serverFileCollection;
        this.routeCollection = options.routeCollection;
        this.userDatabase = options.userDatabase;
        this.handleZipFcn = options.handleZipFcn;
        this.activeView = null;
        this.fileViewContainer = this.$("#file-view-container");
        this.routeViewContainer = this.$("#route-view-container");
        this.uploadFilesRegion = this.$(".file-drop");
        this.saveNotificationContainer = this.$("#save-notification-container");
        this.saveNotification = this.$("#save-notification").miniNotification({
          show: false,
          hideOnClick: false
        });
        this.mainPane = this.$(".main-pane");
        this.leftSidebarContainer = this.$(".left-sidebar-container");
        this.leftSidebar = this.$(".left-sidebar");
        this.clearAllButton = this.$(".clear-all");
        this.fileListContainer = this.$(".file-list-container");
        this.tmplServerFileListItem = Handlebars.templates["file-list-item"];
        this.tmplRouteListItem = Handlebars.templates["route-list-item"];
        this.tmplEditableFileListItem = Handlebars.templates["editable-file-list-item"];
        this.tmplFileLists = Handlebars.templates["file-lists"];
        this.render();
        this.addAll();
        this.serverFileCollection.bind("add", this.addOneServerFile);
        this.serverFileCollection.bind("reset", this.addAll);
        this.serverFileCollection.bind("change:contents", this.handleFileChanged);
        this.serverFileCollection.bind("destroy", this.handleFileDeleted);
        this.routeCollection.bind("add", this.addOneRoute);
        this.routeCollection.bind("reset", this.addAll);
        this.routeCollection.bind("change:routePath", this.handleFileChanged);
        this.routeCollection.bind("change:routeCode", this.handleFileChanged);
        this.routeCollection.bind("change:name", this.handleFileChanged);
        this.routeCollection.bind("change:name", this.handleRouteNameChange);
        this.routeCollection.bind("destroy", this.handleFileDeleted);
        $(window).keydown(this.eventKeyDown);
        $("a[href=#]").attr("href", "javascript:void(0)");
        return this.showInitialSaveNotification();
      }

      render() {
        boundMethodCheck(this, ref);
        this.routeViewContainer.hide();
        this.fileViewContainer.hide();
        this.uploadFilesRegion.show();
        $(this.clearAllButton).confirmDialog({
          message: "Are you sure?",
          confirmButton: "Clear All",
          cancelButton: "Cancel",
          onConfirmCallback: this.clearAll
        });
        return this.renderFileLists();
      }

      renderFileLists() {
        boundMethodCheck(this, ref);
        this.fileListContainer.html(this.tmplFileLists);
        this.fileLists = this.$(".file-list");
        this.requiredFileList = this.$(".file-list.required");
        this.htmlFileList = this.$(".file-list.html");
        this.cssFileList = this.$(".file-list.css");
        this.jsFileList = this.$(".file-list.js");
        this.imageFileList = this.$(".file-list.img");
        this.templateFileList = this.$(".file-list.template");
        return this.dynamicFileList = this.$(".file-list.dynamic");
      }

      showInitialSaveNotification() {
        var shouldShow;
        boundMethodCheck(this, ref);
        shouldShow = false;
        this.serverFileCollection.forEachDevelopmentFile(function(devFile) {
          if (devFile.get("hasBeenEdited") && devFile.isValid()) {
            return shouldShow = true;
          }
        });
        this.routeCollection.each(function(route) {
          if (!route.get("isProductionVersion") && route.get("hasBeenEdited") && route.isValid()) {
            return shouldShow = true;
          }
        });
        if (shouldShow) {
          return this.saveNotification.show();
        } else {
          return this.saveNotification.hide();
        }
      }

      addAll() {
        boundMethodCheck(this, ref);
        this.renderFileLists();
        this.routeViewContainer.hide();
        this.fileViewContainer.hide();
        this.serverFileCollection.each(this.addOneServerFile);
        return this.routeCollection.each(this.addOneRoute);
      }

      addOneServerFile(serverFile) {
        var listEl;
        boundMethodCheck(this, ref);
        if (serverFile.get("isProductionVersion")) {
          return;
        }
        listEl = this.tmplServerFileListItem({
          cid: serverFile.cid,
          name: serverFile.get("name"),
          isRequired: serverFile.get("isRequired")
        });
        this.appendServerFileToFileList(serverFile, listEl);
        this.$("li[data-cid] .delete").addClass("hide");
        return this.setupConfirm(serverFile);
      }

      addOneRoute(route) {
        var listEl;
        boundMethodCheck(this, ref);
        if (route.get("isProductionVersion")) {
          return;
        }
        listEl = this.tmplRouteListItem({
          cid: route.cid,
          name: route.get("name")
        });
        this.dynamicFileList.append(listEl);
        this.$("li[data-cid] .delete").addClass("hide");
        return this.setupConfirm(route);
      }

      setupConfirm(resource) {
        boundMethodCheck(this, ref);
        return $(`li[data-cid=${resource.cid}] .delete`).confirmDialog({
          message: "Are you sure?",
          confirmButton: "Delete",
          cancelButton: "Cancel",
          onConfirmCallback: () => {
            return this.eventDeleteFileConfirmed(resource);
          }
        });
      }

      resetClicksOnFileList() {
        boundMethodCheck(this, ref);
        this.fileLists.find("li").removeClass("active");
        return this.fileLists.find("li .delete").addClass("hide");
      }

      eventSelectFile(event) {
        var cid, resource, route, serverFile, target;
        boundMethodCheck(this, ref);
        target = $(event.currentTarget);
        cid = target.attr("data-cid");
        serverFile = this.serverFileCollection.get(cid);
        route = this.routeCollection.get(cid);
        resource = serverFile || route;
        if (resource && (!this.activeView || this.activeView.model !== resource)) {
          this.uploadFilesRegion.hide();
          this.routeViewContainer.hide();
          this.fileViewContainer.hide();
          this.resetClicksOnFileList();
          target.find(".delete").removeClass("hide");
          if (serverFile) {
            this.selectServerFile(serverFile, target);
          } else if (route) {
            this.selectRoute(route, target);
          }
        }
        return false;
      }

      eventMouseEnterFile(event) {
        var target;
        boundMethodCheck(this, ref);
        target = $(event.currentTarget);
        return target.find(".delete").removeClass("hide");
      }

      eventMouseLeaveFile(event) {
        var target;
        boundMethodCheck(this, ref);
        target = $(event.currentTarget);
        return target.find(".delete").addClass("hide");
      }

      eventDeleteClicked(event) {
        boundMethodCheck(this, ref);
        return event.stopPropagation();
      }

      eventRenameFile(event) {
        var serverFile, target;
        boundMethodCheck(this, ref);
        target = $(event.currentTarget);
        serverFile = this.serverFileCollection.get(target.attr("data-cid"));
        if (!serverFile) {
          return;
        }
        return this.editableFileName(serverFile, target);
      }

      eventDeleteFileConfirmed(resource) {
        boundMethodCheck(this, ref);
        resource.destroy();
        if (this.activeView && this.activeView.model === resource) {
          this.activeView.remove();
          return this.activeView = null;
        }
      }

      clearAll() {
        var model;
        boundMethodCheck(this, ref);
        while (model = this.serverFileCollection.first()) {
          model.destroy();
        }
        while (model = this.routeCollection.first()) {
          model.destroy();
        }
        this.serverFileCollection.reset();
        this.routeCollection.reset();
        return this.userDatabase.clear();
      }

      eventKeyDown(event) {
        boundMethodCheck(this, ref);
        // This condition evaluates to true if CTRL-s or CMD-s are pressed.
        // (83 is the keyCode for "s")
        if (event.which === 83 && (event.ctrlKey || event.metaKey)) {
          this.eventSaveChanges();
          return false;
        }
      }

      eventSaveChanges() {
        var allAreValid;
        boundMethodCheck(this, ref);
        allAreValid = true;
        this.serverFileCollection.forEachDevelopmentFile(function(devFile) {
          if (devFile.isValid()) {
            return devFile.save({
              hasBeenEdited: false
            });
          } else {
            return allAreValid = false;
          }
        });
        this.routeCollection.each(function(route) {
          if (route.isValid()) {
            return route.save({
              hasBeenEdited: false
            });
          } else {
            return allAreValid = false;
          }
        });
        if (allAreValid) {
          this.saveNotification.hide();
          this.serverFileCollection.createProductionVersion();
          return this.routeCollection.createProductionVersion();
        }
      }

      preventDefault(event) {
        boundMethodCheck(this, ref);
        event.preventDefault();
        return false;
      }

      eventUploadFiles() {
        boundMethodCheck(this, ref);
        if (this.activeView) {
          this.activeView.remove();
        }
        this.activeView = null;
        this.resetClicksOnFileList();
        this.fileViewContainer.hide();
        this.routeViewContainer.hide();
        return this.uploadFilesRegion.show();
      }

      eventDropFiles(event) {
        var droppedFiles, file, i, len;
        boundMethodCheck(this, ref);
        // Prevent the page from opening the file directly on drop.
        event.preventDefault();
        droppedFiles = event.originalEvent.dataTransfer.files;
        for (i = 0, len = droppedFiles.length; i < len; i++) {
          file = droppedFiles[i];
          this.handleFile(file);
        }
        return false;
      }

      handleFile(file) {
        var fileType, reader;
        boundMethodCheck(this, ref);
        if (file.type === "application/zip" || file.type === "application/x-zip") {
          this.handleZipFcn(file);
          return;
        }
        reader = new FileReader();
        fileType = ServerFile.rawTypeToFileType(file.type);
        if (fileType === ServerFile.fileTypeEnum.IMG) {
          reader.readAsDataURL(file);
        } else {
          reader.readAsText(file);
        }
        return reader.onload = (evt) => {
          var contents, serverFile;
          contents = evt.target.result; // Result of the text file.
          serverFile = new ServerFile({
            name: file.name,
            size: file.size,
            type: file.type,
            contents: contents
          });
          this.serverFileCollection.add(serverFile);
          return serverFile.save();
        };
      }

      handleFileChanged(model) {
        boundMethodCheck(this, ref);
        model.save({
          hasBeenEdited: true
        });
        return this.showInitialSaveNotification();
      }

      handleRouteNameChange(route) {
        boundMethodCheck(this, ref);
        return this.$(`li[data-cid=${route.cid}] > a`).text(route.get("name"));
      }

      handleFileDeleted(model) {
        boundMethodCheck(this, ref);
        return this.$(`[data-cid=${model.cid}]`).remove();
      }

      eventCreateHTML() {
        var serverFile;
        boundMethodCheck(this, ref);
        serverFile = new ServerFile({
          type: "text/html"
        });
        return this.createFile(serverFile);
      }

      eventCreateJS() {
        var serverFile;
        boundMethodCheck(this, ref);
        serverFile = new ServerFile({
          type: "application/x-javascript"
        });
        return this.createFile(serverFile);
      }

      eventCreateCSS() {
        var serverFile;
        boundMethodCheck(this, ref);
        serverFile = new ServerFile({
          type: "text/css"
        });
        return this.createFile(serverFile);
      }

      eventCreateTemplate() {
        var serverFile;
        boundMethodCheck(this, ref);
        serverFile = new ServerFile({
          type: "text/x-handlebars-template"
        });
        return this.createFile(serverFile);
      }

      createFile(serverFile) {
        boundMethodCheck(this, ref);
        this.resetClicksOnFileList();
        this.serverFileCollection.add(serverFile, {
          silent: true
        });
        return this.editableFileName(serverFile, null);
      }

      eventCreateDynamic() {
        var listEl, route;
        boundMethodCheck(this, ref);
        this.resetClicksOnFileList();
        route = new Route();
        this.routeCollection.add(route);
        route.save();
        listEl = this.$(`li[data-cid=${route.cid}]`);
        return this.selectRoute(route, listEl);
      }

      eventDoneNamingFile(event) {
        var listEl, newListEl, serverFile, target;
        boundMethodCheck(this, ref);
        target = $(event.currentTarget);
        listEl = target.parents("li[data-cid]");
        serverFile = this.serverFileCollection.get(listEl.attr("data-cid"));
        // TODO validate name
        serverFile.save({
          name: target.val()
        });
        newListEl = this.tmplServerFileListItem({
          cid: serverFile.cid,
          name: serverFile.get("name"),
          isRequired: serverFile.get("isRequired")
        });
        newListEl = $($.parseHTML(newListEl));
        listEl.replaceWith(newListEl);
        this.setupConfirm(serverFile);
        return this.selectServerFile(serverFile, newListEl);
      }

      eventKeypressWhileRenaming(event) {
        boundMethodCheck(this, ref);
        if (event.keyCode === 13) {
          return this.eventDoneNamingFile(event);
        }
      }

      editableFileName(serverFile, listElToReplace) {
        var listEl, listElTop;
        boundMethodCheck(this, ref);
        listEl = this.tmplEditableFileListItem({
          cid: serverFile.cid,
          name: serverFile.get("name")
        });
        if (listElToReplace) {
          listEl = $($.parseHTML(listEl));
          listElToReplace.replaceWith(listEl);
        } else {
          this.appendServerFileToFileList(serverFile, listEl);
        }
        listEl = $(`li[data-cid=${serverFile.cid}]`);
        listElTop = listEl.offset().top;
        if ($(window).scrollTop() < listElTop) {
          $(window).scrollTop(listElTop - 60);
        }
        return listEl.find("input").focus();
      }

      appendServerFileToFileList(serverFile, listEl) {
        var section;
        boundMethodCheck(this, ref);
        section = null;
        if (serverFile.get("isRequired")) {
          section = this.requiredFileList;
        } else {
          switch (serverFile.get("fileType")) {
            case ServerFile.fileTypeEnum.HTML:
              section = this.htmlFileList;
              break;
            case ServerFile.fileTypeEnum.CSS:
              section = this.cssFileList;
              break;
            case ServerFile.fileTypeEnum.JS:
              section = this.jsFileList;
              break;
            case ServerFile.fileTypeEnum.IMG:
              section = this.imageFileList;
              break;
            case ServerFile.fileTypeEnum.TEMPLATE:
              section = this.templateFileList;
              break;
            default:
              console.error("Error: Could not find proper place for file. " + serverFile.get("name"));
          }
        }
        if (section) {
          return section.append(listEl);
        }
      }

      select(listEl, view) {
        boundMethodCheck(this, ref);
        listEl.addClass("active");
        if (this.activeView) {
          this.activeView.remove();
        }
        return this.activeView = view;
      }

      selectServerFile(serverFile, listEl) {
        var serverFileView;
        boundMethodCheck(this, ref);
        serverFileView = new ServerFileView({
          model: serverFile
        });
        this.select(listEl, serverFileView);
        this.fileViewContainer.html(serverFileView.render().el);
        this.uploadFilesRegion.hide();
        this.routeViewContainer.hide();
        return this.fileViewContainer.show();
      }

      selectRoute(route, listEl) {
        var routeView;
        boundMethodCheck(this, ref);
        routeView = new RouteView({
          model: route
        });
        this.select(listEl, routeView);
        this.routeViewContainer.html(routeView.render().el);
        this.uploadFilesRegion.hide();
        this.fileViewContainer.hide();
        this.routeViewContainer.show();
        return routeView.focus();
      }

    };

    ClientServerCollectionView.prototype.el = "#client-server-collection-view";

    ClientServerCollectionView.prototype.events = {
      "dragover .file-drop": "preventDefault",
      "drop .file-drop": "eventDropFiles",
      "click .file-list li[data-cid] input": "preventDefault",
      "blur .file-list li[data-cid] input": "eventDoneNamingFile",
      "keypress .file-list li[data-cid] input": "eventKeypressWhileRenaming",
      "click .file-list li[data-cid]": "eventSelectFile",
      "dblclick .file-list li[data-cid]": "eventRenameFile",
      "mouseenter .file-list li[data-cid]": "eventMouseEnterFile",
      "mouseleave .file-list li[data-cid]": "eventMouseLeaveFile",
      "click .file-list li[data-cid] .delete": "eventDeleteClicked",
      "click .upload-files": "eventUploadFiles",
      "click .save-changes": "eventSaveChanges",
      "click .create-menu .html": "eventCreateHTML",
      "click .create-menu .js": "eventCreateJS",
      "click .create-menu .css": "eventCreateCSS",
      "click .create-menu .template": "eventCreateTemplate",
      "click .create-menu .dynamic": "eventCreateDynamic"
    };

    return ClientServerCollectionView;

  }).call(this);

}).call(this);
