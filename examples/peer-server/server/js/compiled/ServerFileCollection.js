// Generated by CoffeeScript 2.5.1
(function() {
  `Tracks user-uploaded files, and their edit/production state.`;
  var ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ref = window.ServerFileCollection = (function() {
    class ServerFileCollection extends Backbone.Collection {
      constructor() {
        super(...arguments);
        this.initLocalStorage = this.initLocalStorage.bind(this);
        this.onServerFileAdded = this.onServerFileAdded.bind(this);
        this.overwriteRequiredPages = this.overwriteRequiredPages.bind(this);
        this.isFilenameInUse = this.isFilenameInUse.bind(this);
        this.filenameAndExtension = this.filenameAndExtension.bind(this);
        this.checkForNoFiles = this.checkForNoFiles.bind(this);
        this.comparator = this.comparator.bind(this);
        this.get404Page = this.get404Page.bind(this);
        this.hasProductionFile = this.hasProductionFile.bind(this);
        this.getFileType = this.getFileType.bind(this);
        this.getContents = this.getContents.bind(this);
        this.createProductionVersion = this.createProductionVersion.bind(this);
        // Iterates over the development files,
        // calling fn on each development file
        this.forEachDevelopmentFile = this.forEachDevelopmentFile.bind(this);
      }

      initialize() {
        return this.on("add", this.onServerFileAdded);
      }

      initLocalStorage(namespace) {
        boundMethodCheck(this, ref);
        this.localStorage = new Backbone.LocalStorage(namespace + "-ServerFileCollection");
        this.fetch({
          success: this.checkForNoFiles
        });
        return this.on("reset", this.checkForNoFiles);
      }

      onServerFileAdded(serverFile) {
        var filenameAndExtension, index, newName, numToAppend, serverFilesWithName;
        boundMethodCheck(this, ref);
        if (!this.overwriteRequiredPages(serverFile)) {
          serverFilesWithName = this.filter(function(otherServerFile) {
            return serverFile.get("name") === otherServerFile.get("name") && !serverFile.get("isProductionVersion") && !otherServerFile.get("isProductionVersion");
          });
          _.sortBy(serverFilesWithName, function(otherServerFile) {
            return otherServerFile.get("dateCreated");
          });
          numToAppend = 1;
          index = 1;
          while (index < serverFilesWithName.length) {
            filenameAndExtension = this.filenameAndExtension(serverFile.get("name"));
            newName = filenameAndExtension.filename + "-" + numToAppend + filenameAndExtension.ext;
            if (!this.isFilenameInUse(newName)) {
              serverFile.save("name", newName);
              index++;
            }
            numToAppend++;
          }
        }
        return serverFile.save();
      }

      overwriteRequiredPages(serverFile) {
        var didOverwrite;
        boundMethodCheck(this, ref);
        didOverwrite = false;
        _.each(["index.html", "404.html"], (pageName) => {
          var defaultPage, serverFilesWithName;
          if (pageName === "index.html") {
            defaultPage = this.indexTemplate;
          } else {
            defaultPage = this.template404;
          }
          if (serverFile.get("name") === pageName && !serverFile.get("isProductionVersion")) {
            serverFilesWithName = this.filter(function(otherServerFile) {
              return serverFile.get("name") === otherServerFile.get("name") && serverFile !== otherServerFile && otherServerFile.get("contents") === defaultPage;
            });
            return _.each(serverFilesWithName, (serverFileWithName) => {
              serverFileWithName.destroy();
              serverFile.set("isRequired", true);
              return didOverwrite = true;
            });
          }
        });
        return didOverwrite;
      }

      isFilenameInUse(filename) {
        var result;
        boundMethodCheck(this, ref);
        result = this.find(function(serverFile) {
          return serverFile.get("name") === filename && !serverFile.get("isProductionVersion");
        });
        return result !== void 0;
      }

      filenameAndExtension(filename) {
        var match;
        boundMethodCheck(this, ref);
        match = filename.match(/(.*)(\..*)$/);
        if (match !== null && match.length === 3) {
          return {
            filename: match[1],
            ext: match[2]
          };
        }
        return {
          filename: filename,
          ext: ""
        };
      }

      checkForNoFiles() {
        var index, notFound;
        boundMethodCheck(this, ref);
        if (this.length > 0) {
          return;
        }
        // Initialize the collection with a index and 404 page (both required),
        // if the user's file collection is empty
        index = new ServerFile({
          name: "index.html",
          size: 0,
          type: "text/html",
          contents: this.indexTemplate,
          isRequired: true
        });
        notFound = new ServerFile({
          name: "404.html",
          size: 0,
          type: "text/html",
          contents: this.template404,
          isRequired: true
        });
        this.add(index);
        this.add(notFound);
        index.save();
        notFound.save();
        // Create an initial production version
        return this.createProductionVersion();
      }

      comparator(serverFile) {
        var filenameAndExtension;
        boundMethodCheck(this, ref);
        filenameAndExtension = this.filenameAndExtension(serverFile.get("name"));
        return filenameAndExtension.filename;
      }

      getLandingPage() {
        var data, landingPage;
        landingPage = this.find(function(serverFile) {
          return serverFile.get("name") === "index.html" && serverFile.get("isProductionVersion");
        });
        if (landingPage) {
          data = {
            fileContents: landingPage.get("contents"),
            filename: landingPage.get("name"),
            type: "text/html"
          };
        } else {
          console.error("ERROR: No index.html file exists in the file collection, may break when trying to use getters.");
          data = {
            fileContents: this.indexTemplate,
            filename: "index.html",
            type: "text/html"
          };
        }
        return data;
      }

      get404Page() {
        var data, page;
        boundMethodCheck(this, ref);
        // TODO -- getContents and getFileType etc depend on the 404.html page actually existing
        //  in the file collection, which they always should.
        page = this.find(function(serverFile) {
          return serverFile.get("name") === "404.html" && serverFile.get("isProductionVersion");
        });
        console.log("Returning 404 page.");
        if (page) {
          data = {
            fileContents: page.get("contents"),
            filename: page.get("name"),
            type: page.get("fileType")
          };
        } else {
          console.error("ERROR: No 404 file exists in the file collection, may break when trying to use getters.");
          data = {
            fileContents: this.template404,
            filename: "404.html",
            type: "HTML"
          };
        }
        return data;
      }

      hasProductionFile(filename) {
        boundMethodCheck(this, ref);
        return this.findWhere({
          name: filename,
          isProductionVersion: true
        });
      }

      getFileType(filename) {
        var fileType, serverFile;
        boundMethodCheck(this, ref);
        serverFile = this.findWhere({
          name: filename,
          isProductionVersion: true
        });
        fileType = "UNKNOWN";
        if (serverFile) {
          fileType = serverFile.get("fileType");
        }
        return fileType;
      }

      getContents(filename) {
        var contents, serverFile;
        boundMethodCheck(this, ref);
        serverFile = this.findWhere({
          name: filename,
          isProductionVersion: true
        });
        contents = "";
        if (serverFile) {
          contents = serverFile.get("contents");
        }
        return contents;
      }

      createProductionVersion() {
        var developmentFiles, productionFiles;
        boundMethodCheck(this, ref);
        productionFiles = this.where({
          isProductionVersion: true
        });
        _.each(productionFiles, (serverFile) => {
          return serverFile.destroy();
        });
        developmentFiles = this.where({
          isProductionVersion: false
        });
        return _.each(developmentFiles, (serverFile) => {
          var attrs, copy;
          attrs = _.clone(serverFile.attributes);
          attrs.id = null;
          copy = new ServerFile(attrs);
          copy.set("isProductionVersion", true);
          this.add(copy);
          return copy.save();
        });
      }

      forEachDevelopmentFile(fn) {
        boundMethodCheck(this, ref);
        return this.each(function(serverFile) {
          if (!serverFile.get("isProductionVersion")) {
            return fn(serverFile);
          }
        });
      }

    };

    ServerFileCollection.prototype.model = ServerFile;

    // --- DEFAULT FILE TEMPLATES ---
    ServerFileCollection.prototype.indexTemplate = `<html>
  <body>
    Hello, world.
  </body>
</html>`;

    ServerFileCollection.prototype.template404 = `<html>
  <body>
    404 - page not found
  </body>
</html>`;

    return ServerFileCollection;

  }).call(this);

}).call(this);
