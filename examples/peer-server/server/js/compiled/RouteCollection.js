// Generated by CoffeeScript 2.5.1
(function() {
  var ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ref = window.RouteCollection = (function() {
    class RouteCollection extends Backbone.Collection {
      constructor() {
        super(...arguments);
        this.initLocalStorage = this.initLocalStorage.bind(this);
        this.initDefaultRoute = this.initDefaultRoute.bind(this);
        this.comparator = this.comparator.bind(this);
        this.findRouteForPath = this.findRouteForPath.bind(this);
        this.getRouteCode = this.getRouteCode.bind(this);
        this.createProductionVersion = this.createProductionVersion.bind(this);
      }

      initialize(options) {}

      initLocalStorage(namespace) {
        boundMethodCheck(this, ref);
        this.localStorage = new Backbone.LocalStorage(namespace + "-RouteCollection");
        this.fetch();
        this.initDefaultRoute(true); // Add a default production route if needed 
        return this.initDefaultRoute(false); // Add a default development route if needed
      }

      initDefaultRoute(desiredVersion) {
        var existing, route;
        boundMethodCheck(this, ref);
        existing = this.find((route) => {
          return route.get("isProductionVersion") === desiredVersion && "/index".match(route.pathRegex) !== null;
        });
        if (existing) {
          return;
        }
        route = new Route({
          name: "default",
          routePath: "/index",
          errorMessage: "Note: Path has not yet been executed.",
          routeCode: "return static_file('index.html')  // Change if desired",
          isProductionVersion: desiredVersion
        });
        this.add(route);
        return route.save();
      }

      comparator(route) {
        boundMethodCheck(this, ref);
        return route.get("routePath");
      }

      findRouteForPath(routePath) {
        var matchedRoute;
        boundMethodCheck(this, ref);
        matchedRoute = this.find((route) => {
          return route.get("isProductionVersion") && routePath.match(route.pathRegex) !== null;
        });
        return matchedRoute;
      }

      getRouteCode(routePath) {
        boundMethodCheck(this, ref);
        return this.findWhere({
          routePath: routePath
        }).get("routeCode");
      }

      createProductionVersion() {
        var developmentFiles, productionFiles;
        boundMethodCheck(this, ref);
        productionFiles = this.where({
          isProductionVersion: true
        });
        _.each(productionFiles, (route) => {
          return route.destroy();
        });
        developmentFiles = this.where({
          isProductionVersion: false
        });
        return _.each(developmentFiles, (route) => {
          var attrs, productionVersion;
          attrs = _.clone(route.attributes);
          attrs.id = null;
          attrs.productionVersion = null;
          productionVersion = new Route(attrs);
          productionVersion.set("isProductionVersion", true);
          this.add(productionVersion);
          productionVersion.save();
          return route.save("productionVersion", productionVersion);
        });
      }

    };

    RouteCollection.prototype.model = Route;

    return RouteCollection;

  }).call(this);

}).call(this);
