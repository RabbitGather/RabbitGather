// Generated by CoffeeScript 2.5.1
(function() {
  window.ClientServerUnarchiver = class ClientServerUnarchiver {
    constructor(params) {
      var contents, database, developmentFiles, productionFiles, zip;
      // TODO (?) Unify clearing code with server collection view
      this.clearAll = this.clearAll.bind(this);
      this.processFile = this.processFile.bind(this);
      this.addRoute = this.addRoute.bind(this);
      this.addServerFile = this.addServerFile.bind(this);
      this.alterContentsForImage = this.alterContentsForImage.bind(this);
      this.serverFileCollection = params.serverFileCollection;
      this.routeCollection = params.routeCollection;
      this.userDatabase = params.userDatabase;
      contents = params.contents;
      this.clearAll();
      zip = new JSZip(contents);
      productionFiles = zip.filter((relativePath, file) => {
        return /^live_version\/.+/.test(relativePath);
      });
      developmentFiles = zip.filter((relativePath, file) => {
        return /^edited_version\/.+/.test(relativePath);
      });
      _.each(productionFiles, _.bind(this.processFile, this, true));
      _.each(developmentFiles, _.bind(this.processFile, this, false));
      database = zip.file("database.db");
      if (database) {
        this.userDatabase.fromJSONArray(database.data);
      }
    }

    clearAll() {
      var model;
      while (model = this.serverFileCollection.first()) {
        model.destroy();
      }
      while (model = this.routeCollection.first()) {
        model.destroy();
      }
      this.serverFileCollection.reset();
      this.routeCollection.reset();
      return this.userDatabase.clear();
    }

    processFile(isProductionVersion, file) {
      var contents, ext, fileType, isRoute, name;
      name = file.name.replace(/^(live|edited)_version\//, "");
      contents = file.data;
      isRoute = /.+\.route\.js$/.test(name);
      fileType = "";
      ext = name.match(/.*\.(.*?)$/);
      if (ext) {
        ext = ext[1];
        fileType = ServerFile.fileExtToFileType[ext] || "";
        if (ext === "jpg" || ext === "png" || ext === "jpeg") {
          contents = this.alterContentsForImage(ext, contents);
        }
      }
      if (isRoute) {
        return this.addRoute(name, contents, isProductionVersion);
      } else {
        return this.addServerFile(name, contents, fileType, isProductionVersion);
      }
    }

    addRoute(name, contents, isProductionVersion) {
      var route, routeCode, routePath;
      contents = JSON.parse(contents);
      name = name.replace(/\.route\.js$/, "");
      routePath = contents.routePath;
      routeCode = contents.routeCode;
      route = new Route({
        name: name,
        routePath: routePath,
        routeCode: routeCode,
        isProductionVersion: isProductionVersion
      });
      this.routeCollection.add(route);
      return route.save();
    }

    addServerFile(name, contents, fileType, isProductionVersion) {
      var serverFile;
      serverFile = new ServerFile({
        name: name,
        contents: contents,
        fileType: fileType,
        isProductionVersion: isProductionVersion
      });
      return this.serverFileCollection.add(serverFile);
    }

    alterContentsForImage(ext, contents) {
      contents = btoa(contents);
      if (ext === "jpg" || ext === "jpeg") {
        return "data:image/jpeg;base64," + contents;
      }
      if (ext === "png") {
        return "data:image/png;base64," + contents;
      }
    }

  };

}).call(this);
